// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Topic is an object representing the database table.
type Topic struct {
	OrganizationID string      `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	ID             string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description    null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	RepositoryID   string      `boil:"repository_id" json:"repository_id" toml:"repository_id" yaml:"repository_id"`
	Root           bool        `boil:"root" json:"root" toml:"root" yaml:"root"`

	R *topicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L topicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TopicColumns = struct {
	OrganizationID string
	ID             string
	Name           string
	Description    string
	CreatedAt      string
	UpdatedAt      string
	RepositoryID   string
	Root           string
}{
	OrganizationID: "organization_id",
	ID:             "id",
	Name:           "name",
	Description:    "description",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	RepositoryID:   "repository_id",
	Root:           "root",
}

// Generated where

var TopicWhere = struct {
	OrganizationID whereHelperstring
	ID             whereHelperstring
	Name           whereHelperstring
	Description    whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	RepositoryID   whereHelperstring
	Root           whereHelperbool
}{
	OrganizationID: whereHelperstring{field: `organization_id`},
	ID:             whereHelperstring{field: `id`},
	Name:           whereHelperstring{field: `name`},
	Description:    whereHelpernull_String{field: `description`},
	CreatedAt:      whereHelpertime_Time{field: `created_at`},
	UpdatedAt:      whereHelpertime_Time{field: `updated_at`},
	RepositoryID:   whereHelperstring{field: `repository_id`},
	Root:           whereHelperbool{field: `root`},
}

// TopicRels is where relationship names are stored.
var TopicRels = struct {
	Organization string
	Repository   string
	ChildLinks   string
	ParentTopics string
	ChildTopics  string
}{
	Organization: "Organization",
	Repository:   "Repository",
	ChildLinks:   "ChildLinks",
	ParentTopics: "ParentTopics",
	ChildTopics:  "ChildTopics",
}

// topicR is where relationships are stored.
type topicR struct {
	Organization *Organization
	Repository   *Repository
	ChildLinks   LinkSlice
	ParentTopics TopicSlice
	ChildTopics  TopicSlice
}

// NewStruct creates a new relationship struct
func (*topicR) NewStruct() *topicR {
	return &topicR{}
}

// topicL is where Load methods for each relationship are stored.
type topicL struct{}

var (
	topicColumns               = []string{"organization_id", "id", "name", "description", "created_at", "updated_at", "repository_id", "root"}
	topicColumnsWithoutDefault = []string{"organization_id", "name", "description", "repository_id"}
	topicColumnsWithDefault    = []string{"id", "created_at", "updated_at", "root"}
	topicPrimaryKeyColumns     = []string{"id"}
)

type (
	// TopicSlice is an alias for a slice of pointers to Topic.
	// This should generally be used opposed to []Topic.
	TopicSlice []*Topic
	// TopicHook is the signature for custom Topic hook methods
	TopicHook func(context.Context, boil.ContextExecutor, *Topic) error

	topicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	topicType                 = reflect.TypeOf(&Topic{})
	topicMapping              = queries.MakeStructMapping(topicType)
	topicPrimaryKeyMapping, _ = queries.BindMapping(topicType, topicMapping, topicPrimaryKeyColumns)
	topicInsertCacheMut       sync.RWMutex
	topicInsertCache          = make(map[string]insertCache)
	topicUpdateCacheMut       sync.RWMutex
	topicUpdateCache          = make(map[string]updateCache)
	topicUpsertCacheMut       sync.RWMutex
	topicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var topicBeforeInsertHooks []TopicHook
var topicBeforeUpdateHooks []TopicHook
var topicBeforeDeleteHooks []TopicHook
var topicBeforeUpsertHooks []TopicHook

var topicAfterInsertHooks []TopicHook
var topicAfterSelectHooks []TopicHook
var topicAfterUpdateHooks []TopicHook
var topicAfterDeleteHooks []TopicHook
var topicAfterUpsertHooks []TopicHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Topic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Topic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Topic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Topic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Topic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Topic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Topic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Topic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Topic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range topicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTopicHook registers your hook function for all future operations.
func AddTopicHook(hookPoint boil.HookPoint, topicHook TopicHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		topicBeforeInsertHooks = append(topicBeforeInsertHooks, topicHook)
	case boil.BeforeUpdateHook:
		topicBeforeUpdateHooks = append(topicBeforeUpdateHooks, topicHook)
	case boil.BeforeDeleteHook:
		topicBeforeDeleteHooks = append(topicBeforeDeleteHooks, topicHook)
	case boil.BeforeUpsertHook:
		topicBeforeUpsertHooks = append(topicBeforeUpsertHooks, topicHook)
	case boil.AfterInsertHook:
		topicAfterInsertHooks = append(topicAfterInsertHooks, topicHook)
	case boil.AfterSelectHook:
		topicAfterSelectHooks = append(topicAfterSelectHooks, topicHook)
	case boil.AfterUpdateHook:
		topicAfterUpdateHooks = append(topicAfterUpdateHooks, topicHook)
	case boil.AfterDeleteHook:
		topicAfterDeleteHooks = append(topicAfterDeleteHooks, topicHook)
	case boil.AfterUpsertHook:
		topicAfterUpsertHooks = append(topicAfterUpsertHooks, topicHook)
	}
}

// One returns a single topic record from the query.
func (q topicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Topic, error) {
	o := &Topic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for topics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Topic records from the query.
func (q topicQuery) All(ctx context.Context, exec boil.ContextExecutor) (TopicSlice, error) {
	var o []*Topic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Topic slice")
	}

	if len(topicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Topic records in the query.
func (q topicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count topics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q topicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if topics exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *Topic) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organizations\"")

	return query
}

// Repository pointed to by the foreign key.
func (o *Topic) Repository(mods ...qm.QueryMod) repositoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RepositoryID),
	}

	queryMods = append(queryMods, mods...)

	query := Repositories(queryMods...)
	queries.SetFrom(query.Query, "\"repositories\"")

	return query
}

// ChildLinks retrieves all the link's Links with an executor via id column.
func (o *Topic) ChildLinks(mods ...qm.QueryMod) linkQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"link_topics\" on \"links\".\"id\" = \"link_topics\".\"child_id\""),
		qm.Where("\"link_topics\".\"parent_id\"=?", o.ID),
	)

	query := Links(queryMods...)
	queries.SetFrom(query.Query, "\"links\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"links\".*"})
	}

	return query
}

// ParentTopics retrieves all the topic's Topics with an executor via id column.
func (o *Topic) ParentTopics(mods ...qm.QueryMod) topicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"topic_topics\" on \"topics\".\"id\" = \"topic_topics\".\"parent_id\""),
		qm.Where("\"topic_topics\".\"child_id\"=?", o.ID),
	)

	query := Topics(queryMods...)
	queries.SetFrom(query.Query, "\"topics\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"topics\".*"})
	}

	return query
}

// ChildTopics retrieves all the topic's Topics with an executor via id column.
func (o *Topic) ChildTopics(mods ...qm.QueryMod) topicQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"topic_topics\" on \"topics\".\"id\" = \"topic_topics\".\"child_id\""),
		qm.Where("\"topic_topics\".\"parent_id\"=?", o.ID),
	)

	query := Topics(queryMods...)
	queries.SetFrom(query.Query, "\"topics\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"topics\".*"})
	}

	return query
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`organizations`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(topicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.Topics = append(foreign.R.Topics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.Topics = append(foreign.R.Topics, local)
				break
			}
		}
	}

	return nil
}

// LoadRepository allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicL) LoadRepository(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.RepositoryID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.RepositoryID {
					continue Outer
				}
			}

			args = append(args, obj.RepositoryID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`repositories`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Repository")
	}

	var resultSlice []*Repository
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Repository")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for repositories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for repositories")
	}

	if len(topicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Repository = foreign
		if foreign.R == nil {
			foreign.R = &repositoryR{}
		}
		foreign.R.Topics = append(foreign.R.Topics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RepositoryID == foreign.ID {
				local.R.Repository = foreign
				if foreign.R == nil {
					foreign.R = &repositoryR{}
				}
				foreign.R.Topics = append(foreign.R.Topics, local)
				break
			}
		}
	}

	return nil
}

// LoadChildLinks allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadChildLinks(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"links\".*, \"a\".\"parent_id\""),
		qm.From("\"links\""),
		qm.InnerJoin("\"link_topics\" as \"a\" on \"links\".\"id\" = \"a\".\"child_id\""),
		qm.WhereIn("\"a\".\"parent_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load links")
	}

	var resultSlice []*Link

	var localJoinCols []string
	for results.Next() {
		one := new(Link)
		var localJoinCol string

		err = results.Scan(&one.OrganizationID, &one.ID, &one.URL, &one.Title, &one.Sha1, &one.CreatedAt, &one.UpdatedAt, &one.RepositoryID, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for links")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice links")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(linkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChildLinks = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &linkR{}
			}
			foreign.R.ParentTopics = append(foreign.R.ParentTopics, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ChildLinks = append(local.R.ChildLinks, foreign)
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.ParentTopics = append(foreign.R.ParentTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadParentTopics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadParentTopics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"topics\".*, \"a\".\"child_id\""),
		qm.From("\"topics\""),
		qm.InnerJoin("\"topic_topics\" as \"a\" on \"topics\".\"id\" = \"a\".\"parent_id\""),
		qm.WhereIn("\"a\".\"child_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topics")
	}

	var resultSlice []*Topic

	var localJoinCols []string
	for results.Next() {
		one := new(Topic)
		var localJoinCol string

		err = results.Scan(&one.OrganizationID, &one.ID, &one.Name, &one.Description, &one.CreatedAt, &one.UpdatedAt, &one.RepositoryID, &one.Root, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for topics")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice topics")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(topicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentTopics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicR{}
			}
			foreign.R.ChildTopics = append(foreign.R.ChildTopics, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ParentTopics = append(local.R.ParentTopics, foreign)
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.ChildTopics = append(foreign.R.ChildTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadChildTopics allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (topicL) LoadChildTopics(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopic interface{}, mods queries.Applicator) error {
	var slice []*Topic
	var object *Topic

	if singular {
		object = maybeTopic.(*Topic)
	} else {
		slice = *maybeTopic.(*[]*Topic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"topics\".*, \"a\".\"parent_id\""),
		qm.From("\"topics\""),
		qm.InnerJoin("\"topic_topics\" as \"a\" on \"topics\".\"id\" = \"a\".\"child_id\""),
		qm.WhereIn("\"a\".\"parent_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load topics")
	}

	var resultSlice []*Topic

	var localJoinCols []string
	for results.Next() {
		one := new(Topic)
		var localJoinCol string

		err = results.Scan(&one.OrganizationID, &one.ID, &one.Name, &one.Description, &one.CreatedAt, &one.UpdatedAt, &one.RepositoryID, &one.Root, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for topics")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice topics")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(topicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChildTopics = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &topicR{}
			}
			foreign.R.ParentTopics = append(foreign.R.ParentTopics, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.ChildTopics = append(local.R.ChildTopics, foreign)
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.ParentTopics = append(foreign.R.ParentTopics, local)
				break
			}
		}
	}

	return nil
}

// SetOrganization of the topic to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.Topics.
func (o *Topic) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &topicR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			Topics: TopicSlice{o},
		}
	} else {
		related.R.Topics = append(related.R.Topics, o)
	}

	return nil
}

// SetRepository of the topic to the related item.
// Sets o.R.Repository to related.
// Adds o to related.R.Topics.
func (o *Topic) SetRepository(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Repository) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"repository_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RepositoryID = related.ID
	if o.R == nil {
		o.R = &topicR{
			Repository: related,
		}
	} else {
		o.R.Repository = related
	}

	if related.R == nil {
		related.R = &repositoryR{
			Topics: TopicSlice{o},
		}
	} else {
		related.R.Topics = append(related.R.Topics, o)
	}

	return nil
}

// AddChildLinks adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ChildLinks.
// Sets related.R.ParentTopics appropriately.
func (o *Topic) AddChildLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"link_topics\" (\"parent_id\", \"child_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &topicR{
			ChildLinks: related,
		}
	} else {
		o.R.ChildLinks = append(o.R.ChildLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &linkR{
				ParentTopics: TopicSlice{o},
			}
		} else {
			rel.R.ParentTopics = append(rel.R.ParentTopics, o)
		}
	}
	return nil
}

// SetChildLinks removes all previously related items of the
// topic replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentTopics's ChildLinks accordingly.
// Replaces o.R.ChildLinks with related.
// Sets related.R.ParentTopics's ChildLinks accordingly.
func (o *Topic) SetChildLinks(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Link) error {
	query := "delete from \"link_topics\" where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeChildLinksFromParentTopicsSlice(o, related)
	if o.R != nil {
		o.R.ChildLinks = nil
	}
	return o.AddChildLinks(ctx, exec, insert, related...)
}

// RemoveChildLinks relationships from objects passed in.
// Removes related items from R.ChildLinks (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentTopics.
func (o *Topic) RemoveChildLinks(ctx context.Context, exec boil.ContextExecutor, related ...*Link) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"link_topics\" where \"parent_id\" = $1 and \"child_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeChildLinksFromParentTopicsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChildLinks {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChildLinks)
			if ln > 1 && i < ln-1 {
				o.R.ChildLinks[i] = o.R.ChildLinks[ln-1]
			}
			o.R.ChildLinks = o.R.ChildLinks[:ln-1]
			break
		}
	}

	return nil
}

func removeChildLinksFromParentTopicsSlice(o *Topic, related []*Link) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ParentTopics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ParentTopics)
			if ln > 1 && i < ln-1 {
				rel.R.ParentTopics[i] = rel.R.ParentTopics[ln-1]
			}
			rel.R.ParentTopics = rel.R.ParentTopics[:ln-1]
			break
		}
	}
}

// AddParentTopics adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ParentTopics.
// Sets related.R.ChildTopics appropriately.
func (o *Topic) AddParentTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"topic_topics\" (\"child_id\", \"parent_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &topicR{
			ParentTopics: related,
		}
	} else {
		o.R.ParentTopics = append(o.R.ParentTopics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicR{
				ChildTopics: TopicSlice{o},
			}
		} else {
			rel.R.ChildTopics = append(rel.R.ChildTopics, o)
		}
	}
	return nil
}

// SetParentTopics removes all previously related items of the
// topic replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ChildTopics's ParentTopics accordingly.
// Replaces o.R.ParentTopics with related.
// Sets related.R.ChildTopics's ParentTopics accordingly.
func (o *Topic) SetParentTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	query := "delete from \"topic_topics\" where \"child_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeParentTopicsFromChildTopicsSlice(o, related)
	if o.R != nil {
		o.R.ParentTopics = nil
	}
	return o.AddParentTopics(ctx, exec, insert, related...)
}

// RemoveParentTopics relationships from objects passed in.
// Removes related items from R.ParentTopics (uses pointer comparison, removal does not keep order)
// Sets related.R.ChildTopics.
func (o *Topic) RemoveParentTopics(ctx context.Context, exec boil.ContextExecutor, related ...*Topic) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"topic_topics\" where \"child_id\" = $1 and \"parent_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeParentTopicsFromChildTopicsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentTopics {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentTopics)
			if ln > 1 && i < ln-1 {
				o.R.ParentTopics[i] = o.R.ParentTopics[ln-1]
			}
			o.R.ParentTopics = o.R.ParentTopics[:ln-1]
			break
		}
	}

	return nil
}

func removeParentTopicsFromChildTopicsSlice(o *Topic, related []*Topic) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ChildTopics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ChildTopics)
			if ln > 1 && i < ln-1 {
				rel.R.ChildTopics[i] = rel.R.ChildTopics[ln-1]
			}
			rel.R.ChildTopics = rel.R.ChildTopics[:ln-1]
			break
		}
	}
}

// AddChildTopics adds the given related objects to the existing relationships
// of the topic, optionally inserting them as new records.
// Appends related to o.R.ChildTopics.
// Sets related.R.ParentTopics appropriately.
func (o *Topic) AddChildTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"topic_topics\" (\"parent_id\", \"child_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &topicR{
			ChildTopics: related,
		}
	} else {
		o.R.ChildTopics = append(o.R.ChildTopics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &topicR{
				ParentTopics: TopicSlice{o},
			}
		} else {
			rel.R.ParentTopics = append(rel.R.ParentTopics, o)
		}
	}
	return nil
}

// SetChildTopics removes all previously related items of the
// topic replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ParentTopics's ChildTopics accordingly.
// Replaces o.R.ChildTopics with related.
// Sets related.R.ParentTopics's ChildTopics accordingly.
func (o *Topic) SetChildTopics(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Topic) error {
	query := "delete from \"topic_topics\" where \"parent_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeChildTopicsFromParentTopicsSlice(o, related)
	if o.R != nil {
		o.R.ChildTopics = nil
	}
	return o.AddChildTopics(ctx, exec, insert, related...)
}

// RemoveChildTopics relationships from objects passed in.
// Removes related items from R.ChildTopics (uses pointer comparison, removal does not keep order)
// Sets related.R.ParentTopics.
func (o *Topic) RemoveChildTopics(ctx context.Context, exec boil.ContextExecutor, related ...*Topic) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"topic_topics\" where \"parent_id\" = $1 and \"child_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeChildTopicsFromParentTopicsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ChildTopics {
			if rel != ri {
				continue
			}

			ln := len(o.R.ChildTopics)
			if ln > 1 && i < ln-1 {
				o.R.ChildTopics[i] = o.R.ChildTopics[ln-1]
			}
			o.R.ChildTopics = o.R.ChildTopics[:ln-1]
			break
		}
	}

	return nil
}

func removeChildTopicsFromParentTopicsSlice(o *Topic, related []*Topic) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.ParentTopics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.ParentTopics)
			if ln > 1 && i < ln-1 {
				rel.R.ParentTopics[i] = rel.R.ParentTopics[ln-1]
			}
			rel.R.ParentTopics = rel.R.ParentTopics[:ln-1]
			break
		}
	}
}

// Topics retrieves all the records using an executor.
func Topics(mods ...qm.QueryMod) topicQuery {
	mods = append(mods, qm.From("\"topics\""))
	return topicQuery{NewQuery(mods...)}
}

// FindTopic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTopic(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Topic, error) {
	topicObj := &Topic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"topics\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, topicObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from topics")
	}

	return topicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Topic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	topicInsertCacheMut.RLock()
	cache, cached := topicInsertCache[key]
	topicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			topicColumns,
			topicColumnsWithDefault,
			topicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(topicType, topicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(topicType, topicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"topics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"topics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into topics")
	}

	if !cached {
		topicInsertCacheMut.Lock()
		topicInsertCache[key] = cache
		topicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Topic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Topic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	topicUpdateCacheMut.RLock()
	cache, cached := topicUpdateCache[key]
	topicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			topicColumns,
			topicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update topics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"topics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, topicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(topicType, topicMapping, append(wl, topicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update topics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for topics")
	}

	if !cached {
		topicUpdateCacheMut.Lock()
		topicUpdateCache[key] = cache
		topicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q topicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for topics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TopicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, topicPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in topic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all topic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Topic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	topicUpsertCacheMut.RLock()
	cache, cached := topicUpsertCache[key]
	topicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			topicColumns,
			topicColumnsWithDefault,
			topicColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			topicColumns,
			topicPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert topics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(topicPrimaryKeyColumns))
			copy(conflict, topicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"topics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(topicType, topicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(topicType, topicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert topics")
	}

	if !cached {
		topicUpsertCacheMut.Lock()
		topicUpsertCache[key] = cache
		topicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Topic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Topic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Topic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), topicPrimaryKeyMapping)
	sql := "DELETE FROM \"topics\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for topics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q topicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no topicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TopicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Topic slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(topicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics")
	}

	if len(topicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Topic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTopic(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TopicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TopicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"topics\".* FROM \"topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TopicSlice")
	}

	*o = slice

	return nil
}

// TopicExists checks if the Topic row exists.
func TopicExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"topics\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if topics exists")
	}

	return exists, nil
}
