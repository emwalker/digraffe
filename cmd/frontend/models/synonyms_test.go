// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSynonyms(t *testing.T) {
	t.Parallel()

	query := Synonyms()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSynonymsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSynonymsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Synonyms().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSynonymsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SynonymSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSynonymsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SynonymExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Synonym exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SynonymExists to return true, but got false.")
	}
}

func testSynonymsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	synonymFound, err := FindSynonym(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if synonymFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSynonymsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Synonyms().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSynonymsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Synonyms().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSynonymsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	synonymOne := &Synonym{}
	synonymTwo := &Synonym{}
	if err = randomize.Struct(seed, synonymOne, synonymDBTypes, false, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}
	if err = randomize.Struct(seed, synonymTwo, synonymDBTypes, false, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = synonymOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = synonymTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Synonyms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSynonymsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	synonymOne := &Synonym{}
	synonymTwo := &Synonym{}
	if err = randomize.Struct(seed, synonymOne, synonymDBTypes, false, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}
	if err = randomize.Struct(seed, synonymTwo, synonymDBTypes, false, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = synonymOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = synonymTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func synonymBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func synonymAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Synonym) error {
	*o = Synonym{}
	return nil
}

func testSynonymsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Synonym{}
	o := &Synonym{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, synonymDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Synonym object: %s", err)
	}

	AddSynonymHook(boil.BeforeInsertHook, synonymBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	synonymBeforeInsertHooks = []SynonymHook{}

	AddSynonymHook(boil.AfterInsertHook, synonymAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	synonymAfterInsertHooks = []SynonymHook{}

	AddSynonymHook(boil.AfterSelectHook, synonymAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	synonymAfterSelectHooks = []SynonymHook{}

	AddSynonymHook(boil.BeforeUpdateHook, synonymBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	synonymBeforeUpdateHooks = []SynonymHook{}

	AddSynonymHook(boil.AfterUpdateHook, synonymAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	synonymAfterUpdateHooks = []SynonymHook{}

	AddSynonymHook(boil.BeforeDeleteHook, synonymBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	synonymBeforeDeleteHooks = []SynonymHook{}

	AddSynonymHook(boil.AfterDeleteHook, synonymAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	synonymAfterDeleteHooks = []SynonymHook{}

	AddSynonymHook(boil.BeforeUpsertHook, synonymBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	synonymBeforeUpsertHooks = []SynonymHook{}

	AddSynonymHook(boil.AfterUpsertHook, synonymAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	synonymAfterUpsertHooks = []SynonymHook{}
}

func testSynonymsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSynonymsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(synonymColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSynonymToOneTopicUsingTopic(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Synonym
	var foreign Topic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, synonymDBTypes, false, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Topic struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TopicID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Topic().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SynonymSlice{&local}
	if err = local.L.LoadTopic(ctx, tx, false, (*[]*Synonym)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Topic == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Topic = nil
	if err = local.L.LoadTopic(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Topic == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSynonymToOneSetOpTopicUsingTopic(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Synonym
	var b, c Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, synonymDBTypes, false, strmangle.SetComplement(synonymPrimaryKeyColumns, synonymColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Topic{&b, &c} {
		err = a.SetTopic(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Topic != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Synonyms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TopicID != x.ID {
			t.Error("foreign key was wrong value", a.TopicID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TopicID))
		reflect.Indirect(reflect.ValueOf(&a.TopicID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TopicID != x.ID {
			t.Error("foreign key was wrong value", a.TopicID, x.ID)
		}
	}
}

func testSynonymsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSynonymsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SynonymSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSynonymsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Synonyms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	synonymDBTypes = map[string]string{`ID`: `uuid`, `TopicID`: `uuid`, `Locale`: `character varying`, `Name`: `character varying`, `CreatedAt`: `timestamp with time zone`, `SortOrder`: `integer`}
	_              = bytes.MinRead
)

func testSynonymsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(synonymPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(synonymColumns) == len(synonymPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSynonymsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(synonymColumns) == len(synonymPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Synonym{}
	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, synonymDBTypes, true, synonymPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(synonymColumns, synonymPrimaryKeyColumns) {
		fields = synonymColumns
	} else {
		fields = strmangle.SetComplement(
			synonymColumns,
			synonymPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SynonymSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSynonymsUpsert(t *testing.T) {
	t.Parallel()

	if len(synonymColumns) == len(synonymPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Synonym{}
	if err = randomize.Struct(seed, &o, synonymDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Synonym: %s", err)
	}

	count, err := Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, synonymDBTypes, false, synonymPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Synonym struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Synonym: %s", err)
	}

	count, err = Synonyms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
