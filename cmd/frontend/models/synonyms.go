// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Synonym is an object representing the database table.
type Synonym struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	TopicID   string    `boil:"topic_id" json:"topic_id" toml:"topic_id" yaml:"topic_id"`
	Locale    string    `boil:"locale" json:"locale" toml:"locale" yaml:"locale"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	SortOrder int       `boil:"sort_order" json:"sort_order" toml:"sort_order" yaml:"sort_order"`

	R *synonymR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L synonymL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SynonymColumns = struct {
	ID        string
	TopicID   string
	Locale    string
	Name      string
	CreatedAt string
	SortOrder string
}{
	ID:        "id",
	TopicID:   "topic_id",
	Locale:    "locale",
	Name:      "name",
	CreatedAt: "created_at",
	SortOrder: "sort_order",
}

// Generated where

var SynonymWhere = struct {
	ID        whereHelperstring
	TopicID   whereHelperstring
	Locale    whereHelperstring
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	SortOrder whereHelperint
}{
	ID:        whereHelperstring{field: `id`},
	TopicID:   whereHelperstring{field: `topic_id`},
	Locale:    whereHelperstring{field: `locale`},
	Name:      whereHelperstring{field: `name`},
	CreatedAt: whereHelpertime_Time{field: `created_at`},
	SortOrder: whereHelperint{field: `sort_order`},
}

// SynonymRels is where relationship names are stored.
var SynonymRels = struct {
	Topic string
}{
	Topic: "Topic",
}

// synonymR is where relationships are stored.
type synonymR struct {
	Topic *Topic
}

// NewStruct creates a new relationship struct
func (*synonymR) NewStruct() *synonymR {
	return &synonymR{}
}

// synonymL is where Load methods for each relationship are stored.
type synonymL struct{}

var (
	synonymColumns               = []string{"id", "topic_id", "locale", "name", "created_at", "sort_order"}
	synonymColumnsWithoutDefault = []string{"topic_id", "locale", "name"}
	synonymColumnsWithDefault    = []string{"id", "created_at", "sort_order"}
	synonymPrimaryKeyColumns     = []string{"id"}
)

type (
	// SynonymSlice is an alias for a slice of pointers to Synonym.
	// This should generally be used opposed to []Synonym.
	SynonymSlice []*Synonym
	// SynonymHook is the signature for custom Synonym hook methods
	SynonymHook func(context.Context, boil.ContextExecutor, *Synonym) error

	synonymQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	synonymType                 = reflect.TypeOf(&Synonym{})
	synonymMapping              = queries.MakeStructMapping(synonymType)
	synonymPrimaryKeyMapping, _ = queries.BindMapping(synonymType, synonymMapping, synonymPrimaryKeyColumns)
	synonymInsertCacheMut       sync.RWMutex
	synonymInsertCache          = make(map[string]insertCache)
	synonymUpdateCacheMut       sync.RWMutex
	synonymUpdateCache          = make(map[string]updateCache)
	synonymUpsertCacheMut       sync.RWMutex
	synonymUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var synonymBeforeInsertHooks []SynonymHook
var synonymBeforeUpdateHooks []SynonymHook
var synonymBeforeDeleteHooks []SynonymHook
var synonymBeforeUpsertHooks []SynonymHook

var synonymAfterInsertHooks []SynonymHook
var synonymAfterSelectHooks []SynonymHook
var synonymAfterUpdateHooks []SynonymHook
var synonymAfterDeleteHooks []SynonymHook
var synonymAfterUpsertHooks []SynonymHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Synonym) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Synonym) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Synonym) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Synonym) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Synonym) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Synonym) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Synonym) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Synonym) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Synonym) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range synonymAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSynonymHook registers your hook function for all future operations.
func AddSynonymHook(hookPoint boil.HookPoint, synonymHook SynonymHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		synonymBeforeInsertHooks = append(synonymBeforeInsertHooks, synonymHook)
	case boil.BeforeUpdateHook:
		synonymBeforeUpdateHooks = append(synonymBeforeUpdateHooks, synonymHook)
	case boil.BeforeDeleteHook:
		synonymBeforeDeleteHooks = append(synonymBeforeDeleteHooks, synonymHook)
	case boil.BeforeUpsertHook:
		synonymBeforeUpsertHooks = append(synonymBeforeUpsertHooks, synonymHook)
	case boil.AfterInsertHook:
		synonymAfterInsertHooks = append(synonymAfterInsertHooks, synonymHook)
	case boil.AfterSelectHook:
		synonymAfterSelectHooks = append(synonymAfterSelectHooks, synonymHook)
	case boil.AfterUpdateHook:
		synonymAfterUpdateHooks = append(synonymAfterUpdateHooks, synonymHook)
	case boil.AfterDeleteHook:
		synonymAfterDeleteHooks = append(synonymAfterDeleteHooks, synonymHook)
	case boil.AfterUpsertHook:
		synonymAfterUpsertHooks = append(synonymAfterUpsertHooks, synonymHook)
	}
}

// One returns a single synonym record from the query.
func (q synonymQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Synonym, error) {
	o := &Synonym{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for synonyms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Synonym records from the query.
func (q synonymQuery) All(ctx context.Context, exec boil.ContextExecutor) (SynonymSlice, error) {
	var o []*Synonym

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Synonym slice")
	}

	if len(synonymAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Synonym records in the query.
func (q synonymQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count synonyms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q synonymQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if synonyms exists")
	}

	return count > 0, nil
}

// Topic pointed to by the foreign key.
func (o *Synonym) Topic(mods ...qm.QueryMod) topicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TopicID),
	}

	queryMods = append(queryMods, mods...)

	query := Topics(queryMods...)
	queries.SetFrom(query.Query, "\"topics\"")

	return query
}

// LoadTopic allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (synonymL) LoadTopic(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSynonym interface{}, mods queries.Applicator) error {
	var slice []*Synonym
	var object *Synonym

	if singular {
		object = maybeSynonym.(*Synonym)
	} else {
		slice = *maybeSynonym.(*[]*Synonym)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &synonymR{}
		}
		args = append(args, object.TopicID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &synonymR{}
			}

			for _, a := range args {
				if a == obj.TopicID {
					continue Outer
				}
			}

			args = append(args, obj.TopicID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`topics`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Topic")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Topic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(synonymAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Topic = foreign
		if foreign.R == nil {
			foreign.R = &topicR{}
		}
		foreign.R.Synonyms = append(foreign.R.Synonyms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TopicID == foreign.ID {
				local.R.Topic = foreign
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.Synonyms = append(foreign.R.Synonyms, local)
				break
			}
		}
	}

	return nil
}

// SetTopic of the synonym to the related item.
// Sets o.R.Topic to related.
// Adds o to related.R.Synonyms.
func (o *Synonym) SetTopic(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Topic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"synonyms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"topic_id"}),
		strmangle.WhereClause("\"", "\"", 2, synonymPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TopicID = related.ID
	if o.R == nil {
		o.R = &synonymR{
			Topic: related,
		}
	} else {
		o.R.Topic = related
	}

	if related.R == nil {
		related.R = &topicR{
			Synonyms: SynonymSlice{o},
		}
	} else {
		related.R.Synonyms = append(related.R.Synonyms, o)
	}

	return nil
}

// Synonyms retrieves all the records using an executor.
func Synonyms(mods ...qm.QueryMod) synonymQuery {
	mods = append(mods, qm.From("\"synonyms\""))
	return synonymQuery{NewQuery(mods...)}
}

// FindSynonym retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSynonym(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Synonym, error) {
	synonymObj := &Synonym{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"synonyms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, synonymObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from synonyms")
	}

	return synonymObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Synonym) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no synonyms provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(synonymColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	synonymInsertCacheMut.RLock()
	cache, cached := synonymInsertCache[key]
	synonymInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			synonymColumns,
			synonymColumnsWithDefault,
			synonymColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(synonymType, synonymMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(synonymType, synonymMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"synonyms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"synonyms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into synonyms")
	}

	if !cached {
		synonymInsertCacheMut.Lock()
		synonymInsertCache[key] = cache
		synonymInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Synonym.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Synonym) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	synonymUpdateCacheMut.RLock()
	cache, cached := synonymUpdateCache[key]
	synonymUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			synonymColumns,
			synonymPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update synonyms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"synonyms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, synonymPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(synonymType, synonymMapping, append(wl, synonymPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update synonyms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for synonyms")
	}

	if !cached {
		synonymUpdateCacheMut.Lock()
		synonymUpdateCache[key] = cache
		synonymUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q synonymQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for synonyms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for synonyms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SynonymSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), synonymPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"synonyms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, synonymPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in synonym slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all synonym")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Synonym) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no synonyms provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(synonymColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	synonymUpsertCacheMut.RLock()
	cache, cached := synonymUpsertCache[key]
	synonymUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			synonymColumns,
			synonymColumnsWithDefault,
			synonymColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			synonymColumns,
			synonymPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert synonyms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(synonymPrimaryKeyColumns))
			copy(conflict, synonymPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"synonyms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(synonymType, synonymMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(synonymType, synonymMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert synonyms")
	}

	if !cached {
		synonymUpsertCacheMut.Lock()
		synonymUpsertCache[key] = cache
		synonymUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Synonym record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Synonym) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Synonym provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), synonymPrimaryKeyMapping)
	sql := "DELETE FROM \"synonyms\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from synonyms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for synonyms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q synonymQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no synonymQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from synonyms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synonyms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SynonymSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Synonym slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(synonymBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), synonymPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"synonyms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, synonymPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from synonym slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synonyms")
	}

	if len(synonymAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Synonym) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSynonym(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SynonymSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SynonymSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), synonymPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"synonyms\".* FROM \"synonyms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, synonymPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SynonymSlice")
	}

	*o = slice

	return nil
}

// SynonymExists checks if the Synonym row exists.
func SynonymExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"synonyms\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if synonyms exists")
	}

	return exists, nil
}
