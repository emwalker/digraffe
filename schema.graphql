type Alert {
  text: String!
  type: AlertType!
  id: String!
}

interface Alertable {
  alerts: [Alert!]!
}

enum AlertType {
  SUCCESS
  WARN
  ERROR
}

scalar DateTime

type Link implements ResourceIdentifiable & Namespaceable {
  availableParentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  createdAt: DateTime!
  id: ID!
  organization: Organization!
  resourcePath: String!
  sha1: String!
  parentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  title: String!
  updatedAt: DateTime!
  url: String!
}

type LinkEdge {
  cursor: String!
  node: Link!
}

type LinkConnection {
  edges: [LinkEdge]
  pageInfo: PageInfo!
}

type Mutation {
  updateLinkTopics(input: UpdateLinkTopicsInput!): UpdateLinkTopicsPayload
  updateTopic(input: UpdateTopicInput!): UpdateTopicPayload
  updateTopicParentTopics(input: UpdateTopicParentTopicsInput!): UpdateTopicParentTopicsPayload
  upsertLink(input: UpsertLinkInput!): UpsertLinkPayload
  upsertTopic(input: UpsertTopicInput!): UpsertTopicPayload
}

interface Namespaceable {
  organization: Organization!
}

type Organization implements ResourceIdentifiable {
  createdAt: DateTime!
  id: ID
  name: String!
  resourcePath: String!
  updatedAt: DateTime!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  viewer: User
  view(repositoryIds: [ID!], viewerId: ID): View!
}

type Repository {
  displayName: String!
  id: ID
  isPrivate: Boolean!
  name: String!
  organization: Organization!
  owner: User!
  rootTopic: Topic!
}

interface ResourceIdentifiable {
  resourcePath: String!
}

union SearchResultItem = Topic | Link

type SearchResultItemEdge {
  node: SearchResultItem
}

type SearchResultItemConnection {
  edges: [SearchResultItemEdge]
}

type Topic implements ResourceIdentifiable & Namespaceable {
  availableParentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  childTopics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  createdAt: DateTime!
  description: String
  id: ID!
  links(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): LinkConnection!
  name: String!
  organization: Organization!
  parentTopics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
  repository: Repository!
  resourcePath: String!
  search(
    searchString: String!,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): SearchResultItemConnection!
  updatedAt: DateTime!
}

type TopicEdge {
  cursor: String!
  node: Topic!
}

type TopicConnection {
  edges: [TopicEdge]
  pageInfo: PageInfo!
}

type User {
  avatarUrl: String!
  createdAt: DateTime!
  defaultRepository: Repository
  id: ID
  name: String!
  primaryEmail: String!
  selectedTopic: Topic
  updatedAt: DateTime!
}

input UpdateTopicInput {
  clientMutationId: String
  description: String
  id: ID!
  name: String!
  topicIds: [ID!]
}

type UpdateTopicPayload {
  topic: Topic!
}

input UpdateLinkTopicsInput {
  clientMutationId: String
  linkId: ID!
  parentTopicIds: [ID!]
}

type UpdateLinkTopicsPayload {
  link: Link!
}

input UpdateTopicParentTopicsInput {
  clientMutationId: String
  topicId: ID!
  parentTopicIds: [ID!]
}

type UpdateTopicParentTopicsPayload implements Alertable {
  alerts: [Alert!]!
  topic: Topic!
}

input UpsertLinkInput {
  addParentTopicIds: [String!]
  clientMutationId: String
  organizationLogin: String!
  repositoryName: String!
  title: String
  url: String!
}

type UpsertLinkPayload implements Alertable {
  alerts: [Alert!]!
  linkEdge: LinkEdge
}

input UpsertTopicInput {
  clientMutationId: String
  description: String
  name: String!
  organizationLogin: String!
  repositoryName: String!
  topicIds: [String!]
}

type UpsertTopicPayload implements Alertable {
  alerts: [Alert!]!
  topicEdge: TopicEdge
}

type View {
  link(id: ID!): Link
  links(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): LinkConnection!
  repository(id: ID, name: String, organizationLogin: String): Repository
  topic(id: ID!): Topic
  topics(
    searchString: String,
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection!
}
