// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Organizations", testOrganizations)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Topics", testTopics)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Organizations", testOrganizationsDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Topics", testTopicsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Topics", testTopicsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Topics", testTopicsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Organizations", testOrganizationsExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Topics", testTopicsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Organizations", testOrganizationsFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Topics", testTopicsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Organizations", testOrganizationsBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Topics", testTopicsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Organizations", testOrganizationsOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Topics", testTopicsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Topics", testTopicsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Organizations", testOrganizationsCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Topics", testTopicsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Organizations", testOrganizationsHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Topics", testTopicsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Organizations", testOrganizationsInsert)
	t.Run("Organizations", testOrganizationsInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Topics", testTopicsInsert)
	t.Run("Topics", testTopicsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("TopicToOrganizationUsingOrganization", testTopicToOneOrganizationUsingOrganization)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("OrganizationToTopics", testOrganizationToManyTopics)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("TopicToOrganizationUsingTopics", testTopicToOneSetOpOrganizationUsingOrganization)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("OrganizationToTopics", testOrganizationToManyAddOpTopics)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Organizations", testOrganizationsReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Topics", testTopicsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Topics", testTopicsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Organizations", testOrganizationsSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Topics", testTopicsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Organizations", testOrganizationsUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Topics", testTopicsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Organizations", testOrganizationsSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Topics", testTopicsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
