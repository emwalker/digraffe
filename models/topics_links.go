// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TopicsLink is an object representing the database table.
type TopicsLink struct {
	OrganizationID string `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	ParentID       string `boil:"parent_id" json:"parent_id" toml:"parent_id" yaml:"parent_id"`
	ChildID        string `boil:"child_id" json:"child_id" toml:"child_id" yaml:"child_id"`

	R *topicsLinkR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L topicsLinkL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TopicsLinkColumns = struct {
	OrganizationID string
	ParentID       string
	ChildID        string
}{
	OrganizationID: "organization_id",
	ParentID:       "parent_id",
	ChildID:        "child_id",
}

// TopicsLinkRels is where relationship names are stored.
var TopicsLinkRels = struct {
	Child        string
	Organization string
	Parent       string
}{
	Child:        "Child",
	Organization: "Organization",
	Parent:       "Parent",
}

// topicsLinkR is where relationships are stored.
type topicsLinkR struct {
	Child        *Link
	Organization *Organization
	Parent       *Topic
}

// NewStruct creates a new relationship struct
func (*topicsLinkR) NewStruct() *topicsLinkR {
	return &topicsLinkR{}
}

// topicsLinkL is where Load methods for each relationship are stored.
type topicsLinkL struct{}

var (
	topicsLinkColumns               = []string{"organization_id", "parent_id", "child_id"}
	topicsLinkColumnsWithoutDefault = []string{"organization_id", "parent_id", "child_id"}
	topicsLinkColumnsWithDefault    = []string{}
	topicsLinkPrimaryKeyColumns     = []string{"organization_id", "parent_id", "child_id"}
)

type (
	// TopicsLinkSlice is an alias for a slice of pointers to TopicsLink.
	// This should generally be used opposed to []TopicsLink.
	TopicsLinkSlice []*TopicsLink
	// TopicsLinkHook is the signature for custom TopicsLink hook methods
	TopicsLinkHook func(context.Context, boil.ContextExecutor, *TopicsLink) error

	topicsLinkQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	topicsLinkType                 = reflect.TypeOf(&TopicsLink{})
	topicsLinkMapping              = queries.MakeStructMapping(topicsLinkType)
	topicsLinkPrimaryKeyMapping, _ = queries.BindMapping(topicsLinkType, topicsLinkMapping, topicsLinkPrimaryKeyColumns)
	topicsLinkInsertCacheMut       sync.RWMutex
	topicsLinkInsertCache          = make(map[string]insertCache)
	topicsLinkUpdateCacheMut       sync.RWMutex
	topicsLinkUpdateCache          = make(map[string]updateCache)
	topicsLinkUpsertCacheMut       sync.RWMutex
	topicsLinkUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var topicsLinkBeforeInsertHooks []TopicsLinkHook
var topicsLinkBeforeUpdateHooks []TopicsLinkHook
var topicsLinkBeforeDeleteHooks []TopicsLinkHook
var topicsLinkBeforeUpsertHooks []TopicsLinkHook

var topicsLinkAfterInsertHooks []TopicsLinkHook
var topicsLinkAfterSelectHooks []TopicsLinkHook
var topicsLinkAfterUpdateHooks []TopicsLinkHook
var topicsLinkAfterDeleteHooks []TopicsLinkHook
var topicsLinkAfterUpsertHooks []TopicsLinkHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TopicsLink) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TopicsLink) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TopicsLink) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TopicsLink) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TopicsLink) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TopicsLink) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TopicsLink) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TopicsLink) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TopicsLink) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsLinkAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTopicsLinkHook registers your hook function for all future operations.
func AddTopicsLinkHook(hookPoint boil.HookPoint, topicsLinkHook TopicsLinkHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		topicsLinkBeforeInsertHooks = append(topicsLinkBeforeInsertHooks, topicsLinkHook)
	case boil.BeforeUpdateHook:
		topicsLinkBeforeUpdateHooks = append(topicsLinkBeforeUpdateHooks, topicsLinkHook)
	case boil.BeforeDeleteHook:
		topicsLinkBeforeDeleteHooks = append(topicsLinkBeforeDeleteHooks, topicsLinkHook)
	case boil.BeforeUpsertHook:
		topicsLinkBeforeUpsertHooks = append(topicsLinkBeforeUpsertHooks, topicsLinkHook)
	case boil.AfterInsertHook:
		topicsLinkAfterInsertHooks = append(topicsLinkAfterInsertHooks, topicsLinkHook)
	case boil.AfterSelectHook:
		topicsLinkAfterSelectHooks = append(topicsLinkAfterSelectHooks, topicsLinkHook)
	case boil.AfterUpdateHook:
		topicsLinkAfterUpdateHooks = append(topicsLinkAfterUpdateHooks, topicsLinkHook)
	case boil.AfterDeleteHook:
		topicsLinkAfterDeleteHooks = append(topicsLinkAfterDeleteHooks, topicsLinkHook)
	case boil.AfterUpsertHook:
		topicsLinkAfterUpsertHooks = append(topicsLinkAfterUpsertHooks, topicsLinkHook)
	}
}

// One returns a single topicsLink record from the query.
func (q topicsLinkQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TopicsLink, error) {
	o := &TopicsLink{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for topics_links")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TopicsLink records from the query.
func (q topicsLinkQuery) All(ctx context.Context, exec boil.ContextExecutor) (TopicsLinkSlice, error) {
	var o []*TopicsLink

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TopicsLink slice")
	}

	if len(topicsLinkAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TopicsLink records in the query.
func (q topicsLinkQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count topics_links rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q topicsLinkQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if topics_links exists")
	}

	return count > 0, nil
}

// Child pointed to by the foreign key.
func (o *TopicsLink) Child(mods ...qm.QueryMod) linkQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChildID),
	}

	queryMods = append(queryMods, mods...)

	query := Links(queryMods...)
	queries.SetFrom(query.Query, "\"links\"")

	return query
}

// Organization pointed to by the foreign key.
func (o *TopicsLink) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organizations\"")

	return query
}

// Parent pointed to by the foreign key.
func (o *TopicsLink) Parent(mods ...qm.QueryMod) topicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := Topics(queryMods...)
	queries.SetFrom(query.Query, "\"topics\"")

	return query
}

// LoadChild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicsLinkL) LoadChild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopicsLink interface{}, mods queries.Applicator) error {
	var slice []*TopicsLink
	var object *TopicsLink

	if singular {
		object = maybeTopicsLink.(*TopicsLink)
	} else {
		slice = *maybeTopicsLink.(*[]*TopicsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicsLinkR{}
		}
		args = append(args, object.ChildID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicsLinkR{}
			}

			for _, a := range args {
				if a == obj.ChildID {
					continue Outer
				}
			}

			args = append(args, obj.ChildID)

		}
	}

	query := NewQuery(qm.From(`links`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Link")
	}

	var resultSlice []*Link
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Link")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for links")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for links")
	}

	if len(topicsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Child = foreign
		if foreign.R == nil {
			foreign.R = &linkR{}
		}
		foreign.R.ChildTopicsLinks = append(foreign.R.ChildTopicsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChildID == foreign.ID {
				local.R.Child = foreign
				if foreign.R == nil {
					foreign.R = &linkR{}
				}
				foreign.R.ChildTopicsLinks = append(foreign.R.ChildTopicsLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicsLinkL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopicsLink interface{}, mods queries.Applicator) error {
	var slice []*TopicsLink
	var object *TopicsLink

	if singular {
		object = maybeTopicsLink.(*TopicsLink)
	} else {
		slice = *maybeTopicsLink.(*[]*TopicsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicsLinkR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicsLinkR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	query := NewQuery(qm.From(`organizations`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(topicsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.TopicsLinks = append(foreign.R.TopicsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.TopicsLinks = append(foreign.R.TopicsLinks, local)
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicsLinkL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopicsLink interface{}, mods queries.Applicator) error {
	var slice []*TopicsLink
	var object *TopicsLink

	if singular {
		object = maybeTopicsLink.(*TopicsLink)
	} else {
		slice = *maybeTopicsLink.(*[]*TopicsLink)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicsLinkR{}
		}
		args = append(args, object.ParentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicsLinkR{}
			}

			for _, a := range args {
				if a == obj.ParentID {
					continue Outer
				}
			}

			args = append(args, obj.ParentID)

		}
	}

	query := NewQuery(qm.From(`topics`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Topic")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Topic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(topicsLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &topicR{}
		}
		foreign.R.ParentTopicsLinks = append(foreign.R.ParentTopicsLinks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentID == foreign.ID {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.ParentTopicsLinks = append(foreign.R.ParentTopicsLinks, local)
				break
			}
		}
	}

	return nil
}

// SetChild of the topicsLink to the related item.
// Sets o.R.Child to related.
// Adds o to related.R.ChildTopicsLinks.
func (o *TopicsLink) SetChild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Link) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"child_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OrganizationID, o.ParentID, o.ChildID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChildID = related.ID
	if o.R == nil {
		o.R = &topicsLinkR{
			Child: related,
		}
	} else {
		o.R.Child = related
	}

	if related.R == nil {
		related.R = &linkR{
			ChildTopicsLinks: TopicsLinkSlice{o},
		}
	} else {
		related.R.ChildTopicsLinks = append(related.R.ChildTopicsLinks, o)
	}

	return nil
}

// SetOrganization of the topicsLink to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.TopicsLinks.
func (o *TopicsLink) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OrganizationID, o.ParentID, o.ChildID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &topicsLinkR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			TopicsLinks: TopicsLinkSlice{o},
		}
	} else {
		related.R.TopicsLinks = append(related.R.TopicsLinks, o)
	}

	return nil
}

// SetParent of the topicsLink to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentTopicsLinks.
func (o *TopicsLink) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Topic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicsLinkPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.OrganizationID, o.ParentID, o.ChildID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentID = related.ID
	if o.R == nil {
		o.R = &topicsLinkR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &topicR{
			ParentTopicsLinks: TopicsLinkSlice{o},
		}
	} else {
		related.R.ParentTopicsLinks = append(related.R.ParentTopicsLinks, o)
	}

	return nil
}

// TopicsLinks retrieves all the records using an executor.
func TopicsLinks(mods ...qm.QueryMod) topicsLinkQuery {
	mods = append(mods, qm.From("\"topics_links\""))
	return topicsLinkQuery{NewQuery(mods...)}
}

// FindTopicsLink retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTopicsLink(ctx context.Context, exec boil.ContextExecutor, organizationID string, parentID string, childID string, selectCols ...string) (*TopicsLink, error) {
	topicsLinkObj := &TopicsLink{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"topics_links\" where \"organization_id\"=$1 AND \"parent_id\"=$2 AND \"child_id\"=$3", sel,
	)

	q := queries.Raw(query, organizationID, parentID, childID)

	err := q.Bind(ctx, exec, topicsLinkObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from topics_links")
	}

	return topicsLinkObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TopicsLink) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics_links provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topicsLinkColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	topicsLinkInsertCacheMut.RLock()
	cache, cached := topicsLinkInsertCache[key]
	topicsLinkInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			topicsLinkColumns,
			topicsLinkColumnsWithDefault,
			topicsLinkColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(topicsLinkType, topicsLinkMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(topicsLinkType, topicsLinkMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"topics_links\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"topics_links\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into topics_links")
	}

	if !cached {
		topicsLinkInsertCacheMut.Lock()
		topicsLinkInsertCache[key] = cache
		topicsLinkInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TopicsLink.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TopicsLink) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	topicsLinkUpdateCacheMut.RLock()
	cache, cached := topicsLinkUpdateCache[key]
	topicsLinkUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			topicsLinkColumns,
			topicsLinkPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update topics_links, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"topics_links\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, topicsLinkPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(topicsLinkType, topicsLinkMapping, append(wl, topicsLinkPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update topics_links row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for topics_links")
	}

	if !cached {
		topicsLinkUpdateCacheMut.Lock()
		topicsLinkUpdateCache[key] = cache
		topicsLinkUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q topicsLinkQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for topics_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for topics_links")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TopicsLinkSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"topics_links\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, topicsLinkPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in topicsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all topicsLink")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TopicsLink) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics_links provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topicsLinkColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	topicsLinkUpsertCacheMut.RLock()
	cache, cached := topicsLinkUpsertCache[key]
	topicsLinkUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			topicsLinkColumns,
			topicsLinkColumnsWithDefault,
			topicsLinkColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			topicsLinkColumns,
			topicsLinkPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert topics_links, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(topicsLinkPrimaryKeyColumns))
			copy(conflict, topicsLinkPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"topics_links\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(topicsLinkType, topicsLinkMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(topicsLinkType, topicsLinkMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert topics_links")
	}

	if !cached {
		topicsLinkUpsertCacheMut.Lock()
		topicsLinkUpsertCache[key] = cache
		topicsLinkUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TopicsLink record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TopicsLink) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TopicsLink provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), topicsLinkPrimaryKeyMapping)
	sql := "DELETE FROM \"topics_links\" WHERE \"organization_id\"=$1 AND \"parent_id\"=$2 AND \"child_id\"=$3"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from topics_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for topics_links")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q topicsLinkQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no topicsLinkQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topics_links")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics_links")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TopicsLinkSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TopicsLink slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(topicsLinkBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"topics_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicsLinkPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topicsLink slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics_links")
	}

	if len(topicsLinkAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TopicsLink) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTopicsLink(ctx, exec, o.OrganizationID, o.ParentID, o.ChildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TopicsLinkSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TopicsLinkSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicsLinkPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"topics_links\".* FROM \"topics_links\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicsLinkPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TopicsLinkSlice")
	}

	*o = slice

	return nil
}

// TopicsLinkExists checks if the TopicsLink row exists.
func TopicsLinkExists(ctx context.Context, exec boil.ContextExecutor, organizationID string, parentID string, childID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"topics_links\" where \"organization_id\"=$1 AND \"parent_id\"=$2 AND \"child_id\"=$3 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, organizationID, parentID, childID)
	}

	row := exec.QueryRowContext(ctx, sql, organizationID, parentID, childID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if topics_links exists")
	}

	return exists, nil
}
