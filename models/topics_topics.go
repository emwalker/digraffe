// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TopicsTopic is an object representing the database table.
type TopicsTopic struct {
	OrganizationID string `boil:"organization_id" json:"organization_id" toml:"organization_id" yaml:"organization_id"`
	ParentID       string `boil:"parent_id" json:"parent_id" toml:"parent_id" yaml:"parent_id"`
	ChildID        string `boil:"child_id" json:"child_id" toml:"child_id" yaml:"child_id"`

	R *topicsTopicR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L topicsTopicL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TopicsTopicColumns = struct {
	OrganizationID string
	ParentID       string
	ChildID        string
}{
	OrganizationID: "organization_id",
	ParentID:       "parent_id",
	ChildID:        "child_id",
}

// TopicsTopicRels is where relationship names are stored.
var TopicsTopicRels = struct {
	Organization string
	Parent       string
	Child        string
}{
	Organization: "Organization",
	Parent:       "Parent",
	Child:        "Child",
}

// topicsTopicR is where relationships are stored.
type topicsTopicR struct {
	Organization *Organization
	Parent       *Topic
	Child        *Topic
}

// NewStruct creates a new relationship struct
func (*topicsTopicR) NewStruct() *topicsTopicR {
	return &topicsTopicR{}
}

// topicsTopicL is where Load methods for each relationship are stored.
type topicsTopicL struct{}

var (
	topicsTopicColumns               = []string{"organization_id", "parent_id", "child_id"}
	topicsTopicColumnsWithoutDefault = []string{"organization_id", "parent_id", "child_id"}
	topicsTopicColumnsWithDefault    = []string{}
	topicsTopicPrimaryKeyColumns     = []string{"parent_id", "child_id"}
)

type (
	// TopicsTopicSlice is an alias for a slice of pointers to TopicsTopic.
	// This should generally be used opposed to []TopicsTopic.
	TopicsTopicSlice []*TopicsTopic
	// TopicsTopicHook is the signature for custom TopicsTopic hook methods
	TopicsTopicHook func(context.Context, boil.ContextExecutor, *TopicsTopic) error

	topicsTopicQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	topicsTopicType                 = reflect.TypeOf(&TopicsTopic{})
	topicsTopicMapping              = queries.MakeStructMapping(topicsTopicType)
	topicsTopicPrimaryKeyMapping, _ = queries.BindMapping(topicsTopicType, topicsTopicMapping, topicsTopicPrimaryKeyColumns)
	topicsTopicInsertCacheMut       sync.RWMutex
	topicsTopicInsertCache          = make(map[string]insertCache)
	topicsTopicUpdateCacheMut       sync.RWMutex
	topicsTopicUpdateCache          = make(map[string]updateCache)
	topicsTopicUpsertCacheMut       sync.RWMutex
	topicsTopicUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var topicsTopicBeforeInsertHooks []TopicsTopicHook
var topicsTopicBeforeUpdateHooks []TopicsTopicHook
var topicsTopicBeforeDeleteHooks []TopicsTopicHook
var topicsTopicBeforeUpsertHooks []TopicsTopicHook

var topicsTopicAfterInsertHooks []TopicsTopicHook
var topicsTopicAfterSelectHooks []TopicsTopicHook
var topicsTopicAfterUpdateHooks []TopicsTopicHook
var topicsTopicAfterDeleteHooks []TopicsTopicHook
var topicsTopicAfterUpsertHooks []TopicsTopicHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TopicsTopic) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TopicsTopic) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TopicsTopic) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TopicsTopic) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TopicsTopic) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TopicsTopic) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TopicsTopic) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TopicsTopic) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TopicsTopic) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range topicsTopicAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTopicsTopicHook registers your hook function for all future operations.
func AddTopicsTopicHook(hookPoint boil.HookPoint, topicsTopicHook TopicsTopicHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		topicsTopicBeforeInsertHooks = append(topicsTopicBeforeInsertHooks, topicsTopicHook)
	case boil.BeforeUpdateHook:
		topicsTopicBeforeUpdateHooks = append(topicsTopicBeforeUpdateHooks, topicsTopicHook)
	case boil.BeforeDeleteHook:
		topicsTopicBeforeDeleteHooks = append(topicsTopicBeforeDeleteHooks, topicsTopicHook)
	case boil.BeforeUpsertHook:
		topicsTopicBeforeUpsertHooks = append(topicsTopicBeforeUpsertHooks, topicsTopicHook)
	case boil.AfterInsertHook:
		topicsTopicAfterInsertHooks = append(topicsTopicAfterInsertHooks, topicsTopicHook)
	case boil.AfterSelectHook:
		topicsTopicAfterSelectHooks = append(topicsTopicAfterSelectHooks, topicsTopicHook)
	case boil.AfterUpdateHook:
		topicsTopicAfterUpdateHooks = append(topicsTopicAfterUpdateHooks, topicsTopicHook)
	case boil.AfterDeleteHook:
		topicsTopicAfterDeleteHooks = append(topicsTopicAfterDeleteHooks, topicsTopicHook)
	case boil.AfterUpsertHook:
		topicsTopicAfterUpsertHooks = append(topicsTopicAfterUpsertHooks, topicsTopicHook)
	}
}

// One returns a single topicsTopic record from the query.
func (q topicsTopicQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TopicsTopic, error) {
	o := &TopicsTopic{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for topics_topics")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TopicsTopic records from the query.
func (q topicsTopicQuery) All(ctx context.Context, exec boil.ContextExecutor) (TopicsTopicSlice, error) {
	var o []*TopicsTopic

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TopicsTopic slice")
	}

	if len(topicsTopicAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TopicsTopic records in the query.
func (q topicsTopicQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count topics_topics rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q topicsTopicQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if topics_topics exists")
	}

	return count > 0, nil
}

// Organization pointed to by the foreign key.
func (o *TopicsTopic) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	query := Organizations(queryMods...)
	queries.SetFrom(query.Query, "\"organizations\"")

	return query
}

// Parent pointed to by the foreign key.
func (o *TopicsTopic) Parent(mods ...qm.QueryMod) topicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ParentID),
	}

	queryMods = append(queryMods, mods...)

	query := Topics(queryMods...)
	queries.SetFrom(query.Query, "\"topics\"")

	return query
}

// Child pointed to by the foreign key.
func (o *TopicsTopic) Child(mods ...qm.QueryMod) topicQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ChildID),
	}

	queryMods = append(queryMods, mods...)

	query := Topics(queryMods...)
	queries.SetFrom(query.Query, "\"topics\"")

	return query
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicsTopicL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopicsTopic interface{}, mods queries.Applicator) error {
	var slice []*TopicsTopic
	var object *TopicsTopic

	if singular {
		object = maybeTopicsTopic.(*TopicsTopic)
	} else {
		slice = *maybeTopicsTopic.(*[]*TopicsTopic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicsTopicR{}
		}
		args = append(args, object.OrganizationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicsTopicR{}
			}

			for _, a := range args {
				if a == obj.OrganizationID {
					continue Outer
				}
			}

			args = append(args, obj.OrganizationID)

		}
	}

	query := NewQuery(qm.From(`organizations`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organizations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organizations")
	}

	if len(topicsTopicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.TopicsTopics = append(foreign.R.TopicsTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OrganizationID == foreign.ID {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.TopicsTopics = append(foreign.R.TopicsTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicsTopicL) LoadParent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopicsTopic interface{}, mods queries.Applicator) error {
	var slice []*TopicsTopic
	var object *TopicsTopic

	if singular {
		object = maybeTopicsTopic.(*TopicsTopic)
	} else {
		slice = *maybeTopicsTopic.(*[]*TopicsTopic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicsTopicR{}
		}
		args = append(args, object.ParentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicsTopicR{}
			}

			for _, a := range args {
				if a == obj.ParentID {
					continue Outer
				}
			}

			args = append(args, obj.ParentID)

		}
	}

	query := NewQuery(qm.From(`topics`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Topic")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Topic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(topicsTopicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Parent = foreign
		if foreign.R == nil {
			foreign.R = &topicR{}
		}
		foreign.R.ParentTopicsTopics = append(foreign.R.ParentTopicsTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ParentID == foreign.ID {
				local.R.Parent = foreign
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.ParentTopicsTopics = append(foreign.R.ParentTopicsTopics, local)
				break
			}
		}
	}

	return nil
}

// LoadChild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (topicsTopicL) LoadChild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTopicsTopic interface{}, mods queries.Applicator) error {
	var slice []*TopicsTopic
	var object *TopicsTopic

	if singular {
		object = maybeTopicsTopic.(*TopicsTopic)
	} else {
		slice = *maybeTopicsTopic.(*[]*TopicsTopic)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &topicsTopicR{}
		}
		args = append(args, object.ChildID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &topicsTopicR{}
			}

			for _, a := range args {
				if a == obj.ChildID {
					continue Outer
				}
			}

			args = append(args, obj.ChildID)

		}
	}

	query := NewQuery(qm.From(`topics`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Topic")
	}

	var resultSlice []*Topic
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Topic")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for topics")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for topics")
	}

	if len(topicsTopicAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Child = foreign
		if foreign.R == nil {
			foreign.R = &topicR{}
		}
		foreign.R.ChildTopicsTopics = append(foreign.R.ChildTopicsTopics, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChildID == foreign.ID {
				local.R.Child = foreign
				if foreign.R == nil {
					foreign.R = &topicR{}
				}
				foreign.R.ChildTopicsTopics = append(foreign.R.ChildTopicsTopics, local)
				break
			}
		}
	}

	return nil
}

// SetOrganization of the topicsTopic to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.TopicsTopics.
func (o *TopicsTopic) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"organization_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicsTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ParentID, o.ChildID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OrganizationID = related.ID
	if o.R == nil {
		o.R = &topicsTopicR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			TopicsTopics: TopicsTopicSlice{o},
		}
	} else {
		related.R.TopicsTopics = append(related.R.TopicsTopics, o)
	}

	return nil
}

// SetParent of the topicsTopic to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentTopicsTopics.
func (o *TopicsTopic) SetParent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Topic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicsTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ParentID, o.ChildID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ParentID = related.ID
	if o.R == nil {
		o.R = &topicsTopicR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &topicR{
			ParentTopicsTopics: TopicsTopicSlice{o},
		}
	} else {
		related.R.ParentTopicsTopics = append(related.R.ParentTopicsTopics, o)
	}

	return nil
}

// SetChild of the topicsTopic to the related item.
// Sets o.R.Child to related.
// Adds o to related.R.ChildTopicsTopics.
func (o *TopicsTopic) SetChild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Topic) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"topics_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"child_id"}),
		strmangle.WhereClause("\"", "\"", 2, topicsTopicPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ParentID, o.ChildID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChildID = related.ID
	if o.R == nil {
		o.R = &topicsTopicR{
			Child: related,
		}
	} else {
		o.R.Child = related
	}

	if related.R == nil {
		related.R = &topicR{
			ChildTopicsTopics: TopicsTopicSlice{o},
		}
	} else {
		related.R.ChildTopicsTopics = append(related.R.ChildTopicsTopics, o)
	}

	return nil
}

// TopicsTopics retrieves all the records using an executor.
func TopicsTopics(mods ...qm.QueryMod) topicsTopicQuery {
	mods = append(mods, qm.From("\"topics_topics\""))
	return topicsTopicQuery{NewQuery(mods...)}
}

// FindTopicsTopic retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTopicsTopic(ctx context.Context, exec boil.ContextExecutor, parentID string, childID string, selectCols ...string) (*TopicsTopic, error) {
	topicsTopicObj := &TopicsTopic{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"topics_topics\" where \"parent_id\"=$1 AND \"child_id\"=$2", sel,
	)

	q := queries.Raw(query, parentID, childID)

	err := q.Bind(ctx, exec, topicsTopicObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from topics_topics")
	}

	return topicsTopicObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TopicsTopic) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics_topics provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topicsTopicColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	topicsTopicInsertCacheMut.RLock()
	cache, cached := topicsTopicInsertCache[key]
	topicsTopicInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			topicsTopicColumns,
			topicsTopicColumnsWithDefault,
			topicsTopicColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(topicsTopicType, topicsTopicMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(topicsTopicType, topicsTopicMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"topics_topics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"topics_topics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into topics_topics")
	}

	if !cached {
		topicsTopicInsertCacheMut.Lock()
		topicsTopicInsertCache[key] = cache
		topicsTopicInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TopicsTopic.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TopicsTopic) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	topicsTopicUpdateCacheMut.RLock()
	cache, cached := topicsTopicUpdateCache[key]
	topicsTopicUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			topicsTopicColumns,
			topicsTopicPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update topics_topics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"topics_topics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, topicsTopicPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(topicsTopicType, topicsTopicMapping, append(wl, topicsTopicPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update topics_topics row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for topics_topics")
	}

	if !cached {
		topicsTopicUpdateCacheMut.Lock()
		topicsTopicUpdateCache[key] = cache
		topicsTopicUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q topicsTopicQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for topics_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for topics_topics")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TopicsTopicSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicsTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"topics_topics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, topicsTopicPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in topicsTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all topicsTopic")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TopicsTopic) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no topics_topics provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(topicsTopicColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	topicsTopicUpsertCacheMut.RLock()
	cache, cached := topicsTopicUpsertCache[key]
	topicsTopicUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			topicsTopicColumns,
			topicsTopicColumnsWithDefault,
			topicsTopicColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			topicsTopicColumns,
			topicsTopicPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert topics_topics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(topicsTopicPrimaryKeyColumns))
			copy(conflict, topicsTopicPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"topics_topics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(topicsTopicType, topicsTopicMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(topicsTopicType, topicsTopicMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert topics_topics")
	}

	if !cached {
		topicsTopicUpsertCacheMut.Lock()
		topicsTopicUpsertCache[key] = cache
		topicsTopicUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TopicsTopic record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TopicsTopic) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TopicsTopic provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), topicsTopicPrimaryKeyMapping)
	sql := "DELETE FROM \"topics_topics\" WHERE \"parent_id\"=$1 AND \"child_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from topics_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for topics_topics")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q topicsTopicQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no topicsTopicQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topics_topics")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics_topics")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TopicsTopicSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TopicsTopic slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(topicsTopicBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicsTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"topics_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicsTopicPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from topicsTopic slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for topics_topics")
	}

	if len(topicsTopicAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TopicsTopic) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTopicsTopic(ctx, exec, o.ParentID, o.ChildID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TopicsTopicSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TopicsTopicSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), topicsTopicPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"topics_topics\".* FROM \"topics_topics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, topicsTopicPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TopicsTopicSlice")
	}

	*o = slice

	return nil
}

// TopicsTopicExists checks if the TopicsTopic row exists.
func TopicsTopicExists(ctx context.Context, exec boil.ContextExecutor, parentID string, childID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"topics_topics\" where \"parent_id\"=$1 AND \"child_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, parentID, childID)
	}

	row := exec.QueryRowContext(ctx, sql, parentID, childID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if topics_topics exists")
	}

	return exists, nil
}
