// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTopicsTopics(t *testing.T) {
	t.Parallel()

	query := TopicsTopics()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTopicsTopicsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopicsTopicsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TopicsTopics().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopicsTopicsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopicsTopicSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTopicsTopicsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TopicsTopicExists(ctx, tx, o.ParentID, o.ChildID)
	if err != nil {
		t.Errorf("Unable to check if TopicsTopic exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TopicsTopicExists to return true, but got false.")
	}
}

func testTopicsTopicsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	topicsTopicFound, err := FindTopicsTopic(ctx, tx, o.ParentID, o.ChildID)
	if err != nil {
		t.Error(err)
	}

	if topicsTopicFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTopicsTopicsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TopicsTopics().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTopicsTopicsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TopicsTopics().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTopicsTopicsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	topicsTopicOne := &TopicsTopic{}
	topicsTopicTwo := &TopicsTopic{}
	if err = randomize.Struct(seed, topicsTopicOne, topicsTopicDBTypes, false, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}
	if err = randomize.Struct(seed, topicsTopicTwo, topicsTopicDBTypes, false, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topicsTopicOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topicsTopicTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopicsTopics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTopicsTopicsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	topicsTopicOne := &TopicsTopic{}
	topicsTopicTwo := &TopicsTopic{}
	if err = randomize.Struct(seed, topicsTopicOne, topicsTopicDBTypes, false, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}
	if err = randomize.Struct(seed, topicsTopicTwo, topicsTopicDBTypes, false, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = topicsTopicOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = topicsTopicTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func topicsTopicBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func topicsTopicAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *TopicsTopic) error {
	*o = TopicsTopic{}
	return nil
}

func testTopicsTopicsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &TopicsTopic{}
	o := &TopicsTopic{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TopicsTopic object: %s", err)
	}

	AddTopicsTopicHook(boil.BeforeInsertHook, topicsTopicBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	topicsTopicBeforeInsertHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.AfterInsertHook, topicsTopicAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	topicsTopicAfterInsertHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.AfterSelectHook, topicsTopicAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	topicsTopicAfterSelectHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.BeforeUpdateHook, topicsTopicBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	topicsTopicBeforeUpdateHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.AfterUpdateHook, topicsTopicAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	topicsTopicAfterUpdateHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.BeforeDeleteHook, topicsTopicBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	topicsTopicBeforeDeleteHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.AfterDeleteHook, topicsTopicAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	topicsTopicAfterDeleteHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.BeforeUpsertHook, topicsTopicBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	topicsTopicBeforeUpsertHooks = []TopicsTopicHook{}

	AddTopicsTopicHook(boil.AfterUpsertHook, topicsTopicAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	topicsTopicAfterUpsertHooks = []TopicsTopicHook{}
}

func testTopicsTopicsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopicsTopicsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(topicsTopicColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTopicsTopicToOneOrganizationUsingOrganization(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TopicsTopic
	var foreign Organization

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, topicsTopicDBTypes, false, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrganizationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Organization().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TopicsTopicSlice{&local}
	if err = local.L.LoadOrganization(ctx, tx, false, (*[]*TopicsTopic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Organization = nil
	if err = local.L.LoadOrganization(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Organization == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTopicsTopicToOneTopicUsingParent(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TopicsTopic
	var foreign Topic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, topicsTopicDBTypes, false, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Topic struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ParentID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Parent().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TopicsTopicSlice{&local}
	if err = local.L.LoadParent(ctx, tx, false, (*[]*TopicsTopic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTopicsTopicToOneTopicUsingChild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local TopicsTopic
	var foreign Topic

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, topicsTopicDBTypes, false, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, topicDBTypes, false, topicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Topic struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ChildID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Child().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TopicsTopicSlice{&local}
	if err = local.L.LoadChild(ctx, tx, false, (*[]*TopicsTopic)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Child == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Child = nil
	if err = local.L.LoadChild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Child == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTopicsTopicToOneSetOpOrganizationUsingOrganization(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TopicsTopic
	var b, c Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, topicsTopicDBTypes, false, strmangle.SetComplement(topicsTopicPrimaryKeyColumns, topicsTopicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Organization{&b, &c} {
		err = a.SetOrganization(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Organization != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TopicsTopics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrganizationID))
		reflect.Indirect(reflect.ValueOf(&a.OrganizationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrganizationID != x.ID {
			t.Error("foreign key was wrong value", a.OrganizationID, x.ID)
		}
	}
}
func testTopicsTopicToOneSetOpTopicUsingParent(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TopicsTopic
	var b, c Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, topicsTopicDBTypes, false, strmangle.SetComplement(topicsTopicPrimaryKeyColumns, topicsTopicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Topic{&b, &c} {
		err = a.SetParent(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentTopicsTopics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ParentID != x.ID {
			t.Error("foreign key was wrong value", a.ParentID)
		}

		if exists, err := TopicsTopicExists(ctx, tx, a.ParentID, a.ChildID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testTopicsTopicToOneSetOpTopicUsingChild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a TopicsTopic
	var b, c Topic

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, topicsTopicDBTypes, false, strmangle.SetComplement(topicsTopicPrimaryKeyColumns, topicsTopicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, topicDBTypes, false, strmangle.SetComplement(topicPrimaryKeyColumns, topicColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Topic{&b, &c} {
		err = a.SetChild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Child != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChildTopicsTopics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ChildID != x.ID {
			t.Error("foreign key was wrong value", a.ChildID)
		}

		if exists, err := TopicsTopicExists(ctx, tx, a.ParentID, a.ChildID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testTopicsTopicsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopicsTopicsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TopicsTopicSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTopicsTopicsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TopicsTopics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	topicsTopicDBTypes = map[string]string{`ChildID`: `uuid`, `OrganizationID`: `uuid`, `ParentID`: `uuid`}
	_                  = bytes.MinRead
)

func testTopicsTopicsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(topicsTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(topicsTopicColumns) == len(topicsTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTopicsTopicsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(topicsTopicColumns) == len(topicsTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TopicsTopic{}
	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, topicsTopicDBTypes, true, topicsTopicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(topicsTopicColumns, topicsTopicPrimaryKeyColumns) {
		fields = topicsTopicColumns
	} else {
		fields = strmangle.SetComplement(
			topicsTopicColumns,
			topicsTopicPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TopicsTopicSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTopicsTopicsUpsert(t *testing.T) {
	t.Parallel()

	if len(topicsTopicColumns) == len(topicsTopicPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TopicsTopic{}
	if err = randomize.Struct(seed, &o, topicsTopicDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopicsTopic: %s", err)
	}

	count, err := TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, topicsTopicDBTypes, false, topicsTopicPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TopicsTopic struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TopicsTopic: %s", err)
	}

	count, err = TopicsTopics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
