type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

interface Namespacable {
  organization: Organization!
}

interface ResourceIdentifiable {
  resourceId: String!
  resourcePath: String!
}

type User {
  email: String!
  id: ID
  name: String!
  resourceId: String!
  selectedTopic: Topic
}

type Topic implements ResourceIdentifiable & Namespacable {
  description: String
  id: ID
  name: String!
  organization: Organization!
  resourceId: String!
  resourcePath: String!
}

type TopicEdge {
  cursor: String!
  node: Topic
}

type TopicConnection {
  edges: [TopicEdge]
  pageInfo: PageInfo!
}

type Link implements ResourceIdentifiable & Namespacable {
  id: ID
  organization: Organization!
  resourceId: String!
  resourcePath: String!
  title: String!
  url: String!
  topics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection
}

type LinkEdge {
  cursor: String!
  node: Link
}

type LinkConnection {
  edges: [LinkEdge]
  pageInfo: PageInfo!
}

type Organization implements ResourceIdentifiable {
  id: ID
  name: String!
  links(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): LinkConnection
  resourceId: String!
  resourcePath: String!
  topic(resourceId: String!): Topic
  topics(
    first: Int,
    after: String,
    last: Int,
    before: String
  ): TopicConnection
}

type Query {
  viewer: User
  organization(resourceId: String!): Organization
}

input CreateTopicInput {
  clientMutationId: String!
  description: String
  name: String!
  organizationId: String!
}

type CreateTopicPayload {
  topicEdge: TopicEdge!
}

input CreateLinkInput {
  clientMutationId: String!
  organizationId: String!
  topicIds: [String!]
  title: String
  url: String!
}

type CreateLinkPayload {
  linkEdge: LinkEdge!
}

input SelectTopicInput {
  topicId: String!
}

type SelectTopicPayload {
  topic: Topic
}

type Mutation {
  createLink(input: CreateLinkInput!): CreateLinkPayload
  createTopic(input: CreateTopicInput!): CreateTopicPayload
  selectTopic(input: SelectTopicInput!): SelectTopicPayload
}
